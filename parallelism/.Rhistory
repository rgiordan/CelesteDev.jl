vp_indices$tau_alpha, vp_indices$tau_beta))
global_mask[global_indices] <- TRUE
#################################
# Sensitivity analysis
comb_indices <- GetPriorsAndNaturalParametersFromVector(
vp_opt, pp, as.numeric(1:(vp_opt$encoded_size + pp$encoded_size)), FALSE)
comb_prior_ind <- GetPriorParametersVector(comb_indices$pp, FALSE)
comb_vp_ind <- GetNaturalParameterVector(comb_indices$vp, FALSE)
opt$calculate_hessian <- TRUE
log_prior_derivs <- GetFullModelLogPriorDerivatives(vp_opt, pp, opt)
log_prior_param_prior <- Matrix(log_prior_derivs$hess[comb_vp_ind, comb_prior_ind])
prior_sens <- -1 * lrvb_results$jac %*% Matrix::solve(lrvb_results$elbo_hess, log_prior_param_prior)#
##################
# Influence functions
library(mvtnorm)
# Monte Carlo samples
n_samples <- 50000
# Define functions necessary to compute influence function stuff
# Just for testing
draw <- mp_opt
beta <- c(1.2, 2.0)
GetBetaLogPrior <- function(beta, pp) {
# You can't use the VB priors because they are
# (1) a function of the natural parameters whose variance would have to be zero and
# (2) not normalized.
dmvnorm(beta, mean=pp$beta_loc, sigma=solve(pp$beta_info), log=TRUE)
}
GetBetaLogDensity <- function(beta, vp_opt, draw, pp, unconstrained, calculate_gradient) {
draw$beta_e_vec <- beta
draw$beta_e2_vec <- beta %*% t(beta)
opt$calculate_gradient <- calculate_gradient
opt$calculate_hessian <- FALSE
q_derivs <- GetLogVariationalDensityDerivatives(draw, vp_opt, opt, global_only=TRUE,
include_beta=TRUE, include_mu=FALSE, include_tau=FALSE)
return(q_derivs)
}
# You could also do this more numerically stably with a Cholesky decomposition.
lrvb_pre_factor <- -1 * lrvb_results$jac %*% solve(lrvb_results$elbo_hess)
# Proposals based on q
u_mean <- mp_opt$beta_e_vec
# Increase the covariance for sampling.  How much is enough?
u_cov <- (1.5 ^ 2) * solve(vp_opt$beta_info)
GetULogDensity <- function(beta) {
dmvnorm(beta, mean=u_mean, sigma=u_cov, log=TRUE)
}
DrawU <- function(n_samples) {
rmvnorm(n_samples, mean=u_mean, sigma=u_cov)
}
u_draws <- DrawU(n_samples)
GetLogPrior <- function(u) {
GetBetaLogPrior(u, pp)
}
# GetLogContaminatingPrior <- function(u) {
#   GetMuLogStudentTPrior(u, pp_perturb)
# }
mp_draw <- mp_opt
log_q_grad <- rep(0, vp_indices$encoded_size)
GetLogVariationalDensity <- function(u) {
beta_q_derivs <- GetBetaLogDensity(u, vp_opt, mp_draw, pp, TRUE, TRUE)
log_q_grad[global_mask] <- beta_q_derivs$grad
list(val=beta_q_derivs$val, grad=log_q_grad)
}
GetLogVariationalDensity(beta)
GetInfluenceFunctionSample <- GetInfluenceFunctionSampleFunction(
GetLogVariationalDensity, GetLogPrior, GetULogDensity, lrvb_pre_factor)
GetInfluenceFunctionSample(u_draws[1, ])
Rprof("/tmp/rprof")
influence_list <- list()
pb <- txtProgressBar(min=1, max=nrow(u_draws), style=3)
for (ind in 1:nrow(u_draws)) {
setTxtProgressBar(pb, ind)
influence_list[[ind]] <- GetInfluenceFunctionSample(u_draws[ind, ])
}
close(pb)
summaryRprof("/tmp/rprof")
influence_vector_list <- lapply(influence_list, function(x) x$influence_function)
length(influence_vector_list)
influence_vector_list[[1]]
influence_vector_list[1:5]
do.call(cbind, influence_vector_list[1:5])
influence_vector_list <- lapply(influence_list, function(x) as.numeric(x$influence_function))
do.call(cbind, influence_vector_list[1:5])
do.call(rbind, influence_vector_list[1:5])
influence_matrix <- do.call(rbind, influence_vector_list)
influence_df <- data.frame(u_draws)
influence_df
head(influence_df)
influence_df <-
data.frame(beta1=u_draws[, 1], beta2=u_draws[, 2])
ind <- pp_indices$beta_loc[1]; param_name <- "beta1"
influence_df <-
data.frame(beta1=u_draws[, 1], beta2=u_draws[, 2], influence=influence_matrix[, ind])
influence_df <-
data.frame(beta1=u_draws[, 1], beta2=u_draws[, 2], influence=influence_matrix[, ind], param_name=param_name)
ggplot(influence_df) +
geom_point(aes(x=beta1, y=beta2, color=influence), alpha=0.2) +
ggtitle(paste("Influence of beta prior on ", param_name))
ggplot(influence_df) +
geom_point(aes(x=beta1, y=beta2, color=influence), alpha=0.2) +
ggtitle(paste("Influence of beta prior on ", param_name)) +
scale_color_gradient2()
ggplot(influence_df) +
geom_point(aes(x=beta1, y=beta2, color=influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2)
ggtitle(paste("Influence of beta prior on ", param_name)) +
scale_color_gradient2()
ggplot(influence_df) +
geom_point(aes(x=beta1, y=beta2, color=influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on ", param_name)) +
scale_color_gradient2()
ind <- pp_indices$beta_loc[2]; param_name <- "beta2"
influence_df <-
data.frame(beta1=u_draws[, 1], beta2=u_draws[, 2], influence=influence_matrix[, ind], param_name=param_name)
ggplot(influence_df) +
geom_point(aes(x=beta1, y=beta2, color=influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on ", param_name)) +
scale_color_gradient2()
ind <- pp_indices$tau_alpha; param_name <- "tau_alpha"
influence_df <-
data.frame(beta1=u_draws[, 1], beta2=u_draws[, 2], influence=influence_matrix[, ind], param_name=param_name)
ggplot(influence_df) +
geom_point(aes(x=beta1, y=beta2, color=influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on ", param_name)) +
scale_color_gradient2()
ind <- mp_indices$beta_e_vec[1]; param_name <- "E[beta1]"
ind <- mp_indices$tau_e; param_name <- "E[tau]"
influence_df <-
data.frame(beta1=u_draws[, 1], beta2=u_draws[, 2], influence=influence_matrix[, ind], param_name=param_name)
ggplot(influence_df) +
geom_point(aes(x=beta1, y=beta2, color=influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on ", param_name)) +
scale_color_gradient2()
ind <- mp_indices$beta_e_outer[1, 1]; param_name <- "E[beta * beta'][1,1]"
influence_df <-
data.frame(beta1=u_draws[, 1], beta2=u_draws[, 2], influence=influence_matrix[, ind], param_name=param_name)
ggplot(influence_df) +
geom_point(aes(x=beta1, y=beta2, color=influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on ", param_name)) +
scale_color_gradient2()
GetIndexRow <- function(ind, param_name) {
data.frame(ind=ind, param_name=param_name)
}
inds  <- data.frame()
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[1], param_name <- "E[beta1]"))
inds  <- data.frame()
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[1], param_name <- "E[beta1]"))
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[2], param_name <- "E[beta2]"))
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_outer[1, 1], param_name <- "E[beta1 beta1]"))
influence_df <- data.frame()
for (n in 1:nrow(indes)) {
influence_df <- rbind(influence_df, GetInfluenceDataFrame(inds$ind, inds$param_name))
}
influence_df <- data.frame()
for (n in 1:nrow(inds)) {
influence_df <- rbind(influence_df, GetInfluenceDataFrame(inds$ind, inds$param_name))
}
GetInfluenceDataFrame <- function(ind, param_name) {
data.frame(draw=1:nrow(u_draws), beta1=u_draws[, 1], beta2=u_draws[, 2],
influence=influence_matrix[, ind], param_name=param_name)
}
influence_df <- data.frame()
for (n in 1:nrow(inds)) {
influence_df <- rbind(influence_df, GetInfluenceDataFrame(inds$ind, inds$param_name))
}
influence_df <- data.frame()
influence_df <- data.frame()
for (n in 1:nrow(inds)) {
influence_df <- rbind(influence_df, GetInfluenceDataFrame(inds[n, "ind"], inds[n, "param_name"]))
}
influence_df
head(influence_df)
foo <- dcast(influence_df, draw + beta1 + beta2 ~ param_name)
foo <- dcast(influence_df, draw + beta1 + beta2 ~ param_name, value.var="influence")
head(foo)
GetIndexRow <- function(ind, param_name) {
data.frame(ind=ind, param_name=param_name)
}
inds  <- data.frame()
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[1], param_name <- "E_beta1"))
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[2], param_name <- "E_beta2"))
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_outer[1, 1], param_name <- "E_beta1_beta1"))
GetInfluenceDataFrame <- function(ind, param_name) {
data.frame(draw=1:nrow(u_draws), beta1=u_draws[, 1], beta2=u_draws[, 2],
influence=influence_matrix[, ind], param_name=param_name)
}
influence_df <- data.frame()
for (n in 1:nrow(inds)) {
influence_df <- rbind(influence_df, GetInfluenceDataFrame(inds[n, "ind"], inds[n, "param_name"]))
}
foo <- dcast(influence_df, draw + beta1 + beta2 ~ param_name, value.var="influence")
head(foo)
?dcast
foo <-
mutate(influence_df, param_name=paste(param_name, "inf", sep="_")) %>%
dcast(influence_df, draw + beta1 + beta2 ~ param_name, value.var="influence")
foo <-
mutate(influence_df, param_name=paste(param_name, "inf", sep="_")) %>%
dcast(draw + beta1 + beta2 ~ param_name, value.var="influence")
head(foo)
GetIndexRow <- function(ind, param_name) {
data.frame(ind=ind, param_name=param_name, val=mp_opt[ind])
}
inds  <- data.frame()
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[1], param_name <- "E_beta1"))
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[2], param_name <- "E_beta2"))
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_outer[1, 1], param_name <- "E_beta1_beta1"))
GetIndexRow <- function(ind, param_name) {
data.frame(ind=ind, param_name=param_name, val=mp_opt[ind])
}
inds  <- data.frame()
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[1], param_name <- "E_beta1"))
inds
mp_opt_vector <- GetMomentParameterVector(mp_opt, FALSE)
mp_opt_vector <- GetMomentParameterVector(mp_opt, FALSE)
GetIndexRow <- function(ind, param_name) {
data.frame(ind=ind, param_name=param_name, val=mp_opt_vector[ind])
}
inds  <- data.frame()
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[1], param_name <- "E_beta1"))
inds
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[1], param_name <- "E_beta1"))
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[2], param_name <- "E_beta2"))
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_outer[1, 1], param_name <- "E_beta1_beta1"))
GetInfluenceDataFrame <- function(ind, param_name, val) {
data.frame(draw=1:nrow(u_draws), beta1=u_draws[, 1], beta2=u_draws[, 2],
influence=influence_matrix[, ind], param_name=param_name, val=val)
}
influence_df <- data.frame()
for (n in 1:nrow(inds)) {
influence_df <- rbind(influence_df, GetInfluenceDataFrame(inds[n, "ind"], inds[n, "param_name"], inds[n, "val"]))
}
foo <-
mutate(influence_df, param_name=paste(param_name, "inf", sep="_")) %>%
dcast(draw + beta1 + beta2 ~ param_name, value.var=c("influence", "var")) %>%
foo <-
mutate(influence_df, param_name=paste(param_name, "inf", sep="_")) %>%
dcast(draw + beta1 + beta2 ~ param_name, value.var=c("influence", "var"))
head(influence_df)
foo <- melt(influence_df, id.vars=c("draw", "beta1", "beta2"))
head(foo)
foo <- melt(influence_df, id.vars=c("draw", "beta1", "beta2", "param_name"))
head(foo)
foo <-
melt(influence_df, id.vars=c("draw", "beta1", "beta2", "param_name")) %>%
dcast(draw + beta1 + beta2 ~ param_name + variable)
head(foo)
inds
inds  <- data.frame()
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[1], param_name <- "E_beta1"))
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_vec[2], param_name <- "E_beta2"))
inds <- rbind(inds, GetIndexRow(mp_indices$beta_e_outer[1, 1], param_name <- "E_beta1_beta1"))
GetInfluenceDataFrame <- function(ind, param_name, val) {
data.frame(draw=1:nrow(u_draws), beta1=u_draws[, 1], beta2=u_draws[, 2],
influence=influence_matrix[, ind], param_name=param_name, val=val)
}
influence_df <- data.frame()
for (n in 1:nrow(inds)) {
influence_df <- rbind(influence_df, GetInfluenceDataFrame(inds[n, "ind"], inds[n, "param_name"], inds[n, "val"]))
}
foo <-
melt(influence_df, id.vars=c("draw", "beta1", "beta2", "param_name")) %>%
dcast(draw + beta1 + beta2 ~ param_name + variable, )
head(foo)
foo <-
melt(influence_df, id.vars=c("draw", "beta1", "beta2", "param_name")) %>%
dcast(draw + beta1 + beta2 ~ param_name + variable) %>%
mutate(var_beta1_influence = E_beta1_beta1_influence - 2 * E_beta1_val * E_beta1_influence)
head(foo)
ggplot(influence_cast) +
geom_point(aes(x=beta1, y=beta2, color=var_beta1_influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on ", param_name)) +
scale_color_gradient2()
influence_cast <-
melt(influence_df, id.vars=c("draw", "beta1", "beta2", "param_name")) %>%
dcast(draw + beta1 + beta2 ~ param_name + variable) %>%
mutate(var_beta1_influence = E_beta1_beta1_influence - 2 * E_beta1_val * E_beta1_influence)
ggplot(influence_cast) +
geom_point(aes(x=beta1, y=beta2, color=var_beta1_influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on ", param_name)) +
scale_color_gradient2()
ggplot(influence_cast) +
geom_point(aes(x=beta1, y=beta2, color=var_beta1_influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on beta1 variance")) +
scale_color_gradient2()
ggplot(influence_cast) +
geom_point(aes(x=beta1, y=beta2, color=E_beta1_beta1_influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on beta1 variance")) +
scale_color_gradient2()
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(
ggplot(influence_cast) +
geom_point(aes(x=beta1, y=beta2, color=var_beta1_influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on beta1 variance")) +
scale_color_gradient2()
,
ggplot(influence_cast) +
geom_point(aes(x=beta1, y=beta2, color=E_beta1_beta1_influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on beta1 beta1")) +
scale_color_gradient2()
,
ggplot(influence_cast) +
geom_point(aes(x=beta1, y=beta2, color=E_beta1_influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on beta1")) +
scale_color_gradient2()
)
multiplot(
ggplot(influence_cast) +
geom_point(aes(x=beta1, y=beta2, color=var_beta1_influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on beta1 variance")) +
scale_color_gradient2()
,
ggplot(influence_cast) +
geom_point(aes(x=beta1, y=beta2, color=E_beta1_beta1_influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on beta1 beta1")) +
scale_color_gradient2()
,
ggplot(influence_cast) +
geom_point(aes(x=beta1, y=beta2, color=E_beta1_influence), alpha=0.2) +
geom_point(aes(x=mp_opt$beta_e_vec[1], y=mp_opt$beta_e_vec[2]), color="red", size=2) +
ggtitle(paste("Influence of beta prior on beta1")) +
scale_color_gradient2()
,
cols=3)
setwd("/home/rgiordan/Documents/git_repos/CelesteDev.jl/parallelism")
times <- read.delim("times.tsv")
head(times)
times <- read.delim("times.tsv", header=FALSE)
names(times) <- c("objid", "time")
times <- read.delim("times.tsv", header=FALSE)
names(times) <- c("objid", "time")
times <- read.delim("times.tsv", header=FALSE, sep=" ")
names(times) <- c("objid", "time")
head(times)
class(times$time)
library(ggplot2)
hist(times$time)
hist(times$time, 100)
hist(log(times$time), 100)
plot(sort(times$time))
plot(log(sort(times$time)))
times_sorted <- data.frame(time=sort(times$time), index=1:nrow(times))
ggplot(times_sorted) +
geom_point(aes(x=log10(index), y=log10(time)))
times_sorted <- data.frame(time=sort(times$time), index=(1:nrow(times)) / nrow(times))
ggplot(times_sorted) +
geom_point(aes(x=log10(index), y=log10(time)))
ggplot(filter(times_sorted, time > 1)) +
geom_point(aes(x=log10(time), y=log10(index)))
head(times_sorted)
library(ddplyr)
ggplot(filter(times_sorted, time > 1)) +
geom_point(aes(x=log10(time), y=log10(index)))
filter(times_sorted, time > 1.0)
class(times_sorted$time)
class(times_sorted$time > 1)
?filter
library(ddplyr)
library(dplyr)
ggplot(filter(times_sorted, time > 1)) +
geom_point(aes(x=log10(time), y=log10(index)))
ggplot(filter(times_sorted, time > 10)) +
geom_point(aes(x=log10(time), y=log10(index)))
hist(log(times$time), 100)
10:1
times_sorted <- data.frame(time=sort(times$time), index=(nrow(times):1) / nrow(times))
ggplot(filter(times_sorted, time > 10)) +
geom_point(aes(x=log10(time), y=log10(index)))
times_sorted <- data.frame(time=sort(times$time), index=(nrow(times):1) / nrow(times))
ggplot(filter(times_sorted, time > 5)) +
geom_point(aes(x=log10(time), y=log10(index)))
times_sorted <- data.frame(time=sort(times$time), index=(nrow(times):1) / nrow(times))
ggplot(filter(times_sorted, time > 3)) +
geom_point(aes(x=log10(time), y=log10(index)))
lm(filter(times_sorted, time > 10), log10(time) ~ log10(index))
lm(log10(time) ~ log10(index), filter(times_sorted, time > 10))
alpha <- coefficients(lm(log10(time) ~ log10(index), filter(times_sorted, time > 10)))
alpha
alpha <- coefficients(lm(log10(time) ~ log10(index), filter(times_sorted, time > 10)))[2]
alpha
alpha <- coefficients(lm(log10(time) ~ log10(index), filter(times_sorted, time > 10)))[2] - 1
alpha
class(alpha)
min_time <- 10
times_sorted <- data.frame(time=sort(times$time), index=(nrow(times):1) / nrow(times))
ggplot(filter(times_sorted, time > min_time)) +
geom_point(aes(x=log10(time), y=log10(index)))
alpha <- coefficients(lm(log10(time) ~ log10(index), filter(times_sorted, time > 10)))[2] - 1
coeffs <- coefficients(lm(log10(time) ~ log10(index), filter(times_sorted, time > 10)))
alpha <- coeffs[2] - 1
const <- coeffs[1]
ggplot(filter(times_sorted, time > min_time)) +
geom_point(aes(x=log10(time), y=log10(index))) +
geom_abline(aes(slope=alpha + 1, const))
ggplot(filter(times_sorted, time > min_time)) +
geom_point(aes(x=log10(time), y=log10(index))) +
geom_abline(aes(slope=alpha + 1, intercept=const))
ggplot(filter(times_sorted, time > min_time)) +
geom_point(aes(x=log10(time), y=log10(index))) +
geom_abline(aes(slope=alpha + 1, intercept=const))
times_sorted <- data.frame(time=sort(times$time), index=(nrow(times):1) / nrow(times))
coeffs <- coefficients(lm(log10(index) ~ log10(time), filter(times_sorted, time > 10)))
alpha <- coeffs[2] - 1
const <- coeffs[1]
ggplot(filter(times_sorted, time > min_time)) +
geom_point(aes(x=log10(time), y=log10(index))) +
geom_abline(aes(slope=alpha + 1, intercept=const))
setwd("/home/rgiordan/Documents/git_repos/CelesteDev.jl/parallelism")
times <- read.delim("times.tsv", header=FALSE, sep=" ")
names(times) <- c("objid", "time")
hist(log(times$time), 100)
class(times$time)
times <- read.delim("times.tsv", header=FALSE, sep=" ", colClasses=c("factor", "numeric"))
head(times)
rm(times)
times <- read.delim("times.tsv", header=FALSE, sep=" ", colClasses=c("factor", "numeric"))
head(times)
?read.delim
times <- read.delim("times.tsv", header=FALSE, sep=" ", colClasses=c("factor", "numeric"))
names(times) <- c("objid", "time")
hist(log(times$time), 100)
min_time <- 10
times_sorted <- data.frame(time=sort(times$time), index=(nrow(times):1) / nrow(times))
coeffs <- coefficients(lm(log10(index) ~ log10(time), filter(times_sorted, time > 10)))
alpha <- coeffs[2] - 1
const <- coeffs[1]
ggplot(filter(times_sorted, time > min_time)) +
geom_point(aes(x=log10(time), y=log10(index))) +
geom_abline(aes(slope=alpha + 1, intercept=const))
alpha
min_time <- 3
times_sorted <- data.frame(time=sort(times$time), index=(nrow(times):1) / nrow(times))
coeffs <- coefficients(lm(log10(index) ~ log10(time), filter(times_sorted, time > 10)))
alpha <- coeffs[2] - 1
const <- coeffs[1]
ggplot(filter(times_sorted, time > min_time)) +
geom_point(aes(x=log10(time), y=log10(index))) +
geom_abline(aes(slope=alpha + 1, intercept=const))
qqnorm(log(times$time))
qqnorm(log(times$time))
min_time <- 3
times_sorted <- data.frame(time=sort(times$time), index=(nrow(times):1) / nrow(times))
coeffs <- coefficients(lm(log10(index) ~ log10(time), filter(times_sorted, time > 10)))
alpha <- coeffs[2] - 1
const <- coeffs[1]
ggplot(filter(times_sorted, time > min_time)) +
geom_point(aes(x=log10(time), y=log10(index))) +
geom_abline(aes(slope=alpha + 1, intercept=const))
ggplot(filter(times_sorted, time > min_time)) +
geom_point(aes(x=log10(time), y=log10(index))) +
geom_abline(aes(slope=alpha + 1, intercept=const)) +
ggtitle(sprintf("Alpha = %f", alpha))
ggplot(filter(times_sorted, time > min_time)) +
geom_point(aes(x=log10(time), y=log10(index))) +
geom_abline(aes(slope=alpha + 1, intercept=const)) +
ylab("Log of 1 - cumulative distribution") +
ggtitle(sprintf("Alpha = %f", alpha))
ggplot(filter(times_sorted, time > min_time)) +
geom_point(aes(x=log10(time), y=log10(index))) +
geom_abline(aes(slope=alpha + 1, intercept=const)) +
ylab("Log of 1 - cumulative distribution") +
ggtitle(sprintf("Tail of 1 - optimiazation time CDF\nAlpha = %f", alpha))
